version: '3.9'
services:

  minio:
    hostname: minio
    image: 'minio/minio'
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./data/minio:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: server /data --console-address ":9001"
    networks:
      - ndsnet

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
    networks:
      - ndsnet
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      exit 0;
      "    
    depends_on:
      - minio
 
  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=ngods
      - POSTGRES_USER=ngods
      - POSTGRES_DB=ngods
    ports:
      - '5432:5432'
    networks:
      - ndsnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ngods"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  aio:
    build: aio/
    container_name: aio
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=us-east-1
    volumes:
      - ./data/html:/var/lib/ngods/html
      - ./data/stage:/var/lib/ngods/stage
      - ./data/spark/notebooks:/var/lib/ngods/notebooks
      - ./projects/dagster:/var/lib/ngods/dagster
      - ./projects/dbt:/var/lib/ngods/dbt
    ports:
      - '8888:8888' # Spark notebook port
      - '7077:7077' # Spark port
      - '8061:8061' # Spark master web ui port
      - '8062:8062' # Spark worker web ui port
      - '10000:10000' # Thrift ODBC/JDBC port
      - '10009:10009' # Kyuubi JDBC port
      - '18080:18080' # Spark history web ui port
      - '3070:3070' # Dagster web ui port
    networks:
      ndsnet:
        aliases:
          - spark
          - dagster
          - dbt
          - aio
    command: 
      - notebook
    depends_on:
      - postgres
      - minio
  
  trino:
    build: trino/
    container_name: trino
    volumes:
      - ./data/stage:/var/lib/ngods/stage
      - ./certs/trino.pass:/trino.pass
      - ./certs/trino_key_and_cert.pem:/trino_key_and_cert.pem
      - ./certs/trino_key.pem:/trino_key.pem
      - ./certs/trino_cert.pem:/trino_cert.pem
    ports:
      - '8060:8060' # Trino
      - '8063:8063' # Trino
    networks:
      ndsnet:
        aliases:
          - trino
    depends_on:
      - postgres
      - minio

    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

  cube:
    image: cubejs/cube
    container_name: cube
    hostname: cube
    volumes:
      - ./conf/cube:/cube/conf
    ports:
      - 3000:3000 
      - 4000:4000
      - 3245:3245
    networks:
      - ndsnet
    depends_on:
      - aio

  metabase:
    container_name: metabase
    depends_on:
      - cube
    hostname: metabase
    build: metabase/
    volumes:
      - ./conf/metabase:/conf
    ports:
      - 3030:3030
    networks:
      - ndsnet

  mariadb:
    container_name: mariadb
    hostname: mariadb
    image: postgres:12.3
    environment:
      - POSTGRES_ROOT_PASSWORD=admin
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DATABASE=metastore_db
    ports:
      - '3306:5432'
    volumes:
      - ./data/mariadb:/var/lib/mysql  
      - ./conf/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql 
    networks:
      - ndsnet    

  broker:
    container_name: broker
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_HEAP_OPTS=-Xms256m -Xmx256m
    hostname: broker
    image: confluentinc/cp-kafka:5.4.0
    ports:
      - 29092:29092
      - 9092:9092
    networks:
      - ndsnet
  
  datahub-actions:
    depends_on:
      - datahub-gms
    environment:
      - DATAHUB_GMS_HOST=datahub-gms
      - GMS_HOST=datahub-gms
      - DATAHUB_GMS_PORT=8080
      - GMS_PORT=8080
      - KAFKA_BOOTSTRAP_SERVER=broker:29092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - METADATA_AUDIT_EVENT_NAME=MetadataAuditEvent_v4
      - METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME=MetadataChangeLog_Versioned_v1
      - DATAHUB_SYSTEM_CLIENT_ID=__datahub_system
      - DATAHUB_SYSTEM_CLIENT_SECRET=JohnSnowKnowsNothing
      - KAFKA_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT
    volumes:
      - ./projects/dbt:/dbt
    hostname: actions
    image: acryldata/datahub-actions:8eb5bd0
    restart: on-failure:5
    networks:
      - ndsnet

  datahub-frontend-react:
    container_name: datahub-frontend-react
    depends_on:
      - datahub-gms
    environment:
      - DATAHUB_GMS_HOST=datahub-gms
      - DATAHUB_GMS_PORT=8080
      - DATAHUB_SECRET=YouKnowNothing
      - DATAHUB_APP_VERSION=1.0
      - DATAHUB_PLAY_MEM_BUFFER_SIZE=10MB
      - JAVA_OPTS=-Xms512m -Xmx512m -Dhttp.port=9002 -Dconfig.file=datahub-frontend/conf/application.conf -Djava.security.auth.login.config=datahub-frontend/conf/jaas.conf -Dlogback.configurationFile=datahub-frontend/conf/logback.xml -Dlogback.debug=false -Dpidfile.path=/dev/null
      - KAFKA_BOOTSTRAP_SERVER=broker:29092
      - DATAHUB_TRACKING_TOPIC=DataHubUsageEvent_v1
      - ELASTIC_CLIENT_HOST=elasticsearch
      - ELASTIC_CLIENT_PORT=9200
    hostname: datahub-frontend-react
    image: linkedin/datahub-frontend-react:${DATAHUB_VERSION:-head}
    ports:
      - 9002:9002
    networks:
      - ndsnet
    volumes:
      - ${HOME}/.datahub/plugins:/etc/datahub/plugins

  datahub-gms:
    container_name: datahub-gms
    depends_on:
      - mariadb
    environment:
      - DATASET_ENABLE_SCSI=false
      - EBEAN_DATASOURCE_USERNAME=root
      - EBEAN_DATASOURCE_PASSWORD=admin
      - EBEAN_DATASOURCE_HOST=mariadb:3306
      - EBEAN_DATASOURCE_URL=jdbc:postgresql://mariadb:3306/datahub
      - EBEAN_DATASOURCE_DRIVER=org.postgresql.Driver
      - KAFKA_BOOTSTRAP_SERVER=broker:29092
      - KAFKA_SCHEMAREGISTRY_URL=http://schema-registry:8081
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - GRAPH_SERVICE_IMPL=elasticsearch
      - JAVA_OPTS=-Xms1g -Xmx1g
      - ENTITY_REGISTRY_CONFIG_PATH=/datahub/datahub-gms/resources/entity-registry.yml
      - MAE_CONSUMER_ENABLED=true
      - MCE_CONSUMER_ENABLED=true
      - DATAHUB_SERVER_TYPE=${DATAHUB_SERVER_TYPE:-quickstart}
      - DATAHUB_TELEMETRY_ENABLED=${DATAHUB_TELEMETRY_ENABLED:-true}
      - PE_CONSUMER_ENABLED=true
    hostname: datahub-gms
    image: linkedin/datahub-gms:0a0db02
    ports:
      - 8080:8080
    volumes:
      - ${HOME}/.datahub/plugins:/etc/datahub/plugins
    networks:
      - ndsnet

  elasticsearch:
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms256m -Xmx256m -Dlog4j2.formatMsgNoLookups=true
    healthcheck:
      retries: 4
      start_period: 2m
      test:
        - CMD-SHELL
        - curl -sS --fail 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=0s' || exit 1
    hostname: elasticsearch
    image: elasticsearch:7.9.3
    mem_limit: 1g
    ports:
      - 9200:9200
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - ndsnet
  
  elasticsearch-setup:
    container_name: elasticsearch-setup
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_PROTOCOL=http
    hostname: elasticsearch-setup
    image: linkedin/datahub-elasticsearch-setup:0a0db02
    networks:
      - ndsnet

  kafka-setup:
    container_name: kafka-setup
    depends_on:
      - broker
      - schema-registry
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BOOTSTRAP_SERVER=broker:29092
    hostname: kafka-setup
    image: linkedin/datahub-kafka-setup:0a0db02
    networks:
      - ndsnet
  
  schema-registry:
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schemaregistry
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
    hostname: schema-registry
    image: confluentinc/cp-schema-registry:5.4.0
    ports:
      - 8081:8081
    networks:
      - ndsnet
  
  zookeeper:
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:5.4.0
    ports:
      - 2181:2181
    volumes:
      - ./data/zookeeper:/var/opt/zookeeper
    networks:
      - ndsnet    
  
  
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    env_file: .env
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "2181:2181"
    volumes:
      - zk_data:/var/opt/zookeeper

  broker:
    image: confluentinc/cp-kafka:5.4.0
    env_file: .env
    hostname: broker
    container_name: broker
    environment:
      KAFKA_HEAP_OPTS: ${KAFKA_HEAP_OPTS}
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data/

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: linkedin/datahub-kafka-setup:0a0db02
    env_file: .env
    hostname: kafka-setup
    container_name: kafka-setup
    environment:
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      KAFKA_SCHEMAREGISTRY_URL: ${KAFKA_SCHEMAREGISTRY_URL}
    depends_on:
      - broker
      - schema-registry

  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.0
    env_file: .env
    hostname: schema-registry
    container_name: schema-registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: ${SCHEMA_REGISTRY_HOST_NAME}
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: ${SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL}
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"

  elasticsearch:
    image: elasticsearch:7.9.3
    env_file: .env
    container_name: elasticsearch
    hostname: elasticsearch
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: ${ES_JAVA_OPTS}
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
        test: ["CMD-SHELL", "curl -sS --fail 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=0s' || exit 1"]
        start_period: 2m
        retries: 4

  neo4j:
    image: neo4j:4.0.6
    env_file: .env
    hostname: neo4j
    container_name: neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      NEO4J_dbms_default__database: ${NEO4J_dbms_default__database}
      NEO4J_dbms_allow__upgrade: ${NEO4J_dbms_allow__upgrade}
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data

  # This "container" is a workaround to pre-create search indices
  elasticsearch-setup:
    image: linkedin/datahub-elasticsearch-setup:0a0db02
    env_file: .env
    hostname: elasticsearch-setup
    container_name: elasticsearch-setup
    environment:
      ELASTICSEARCH_HOST: ${DATAHUB_GMS_ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${DATAHUB_GMS_ELASTICSEARCH_PORT}
      ELASTICSEARCH_PROTOCOL: http
    depends_on:
      - elasticsearch

  datahub-gms:
    image: linkedin/datahub-gms:0a0db02
    hostname: datahub-gms
    container_name: datahub-gms
    env_file: .env
    environment:
      EBEAN_DATASOURCE_USERNAME: ${DATAHUB_GMS_EBEAN_DATASOURCE_USERNAME}
      EBEAN_DATASOURCE_PASSWORD: ${DATAHUB_GMS_EBEAN_DATASOURCE_PASSWORD}
      EBEAN_DATASOURCE_HOST: ${DATAHUB_GMS_EBEAN_DATASOURCE_HOST}
      EBEAN_DATASOURCE_URL: ${DATAHUB_GMS_EBEAN_DATASOURCE_URL}
      EBEAN_DATASOURCE_DRIVER: ${DATAHUB_GMS_EBEAN_DATASOURCE_DRIVER}
      ELASTICSEARCH_HOST: ${DATAHUB_GMS_ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${DATAHUB_GMS_ELASTICSEARCH_PORT}
      MAE_CONSUMER_ENABLED: ${DATAHUB_GMS_MAE_CONSUMER_ENABLED}
      MCE_CONSUMER_ENABLED: ${DATAHUB_GMS_MCE_CONSUMER_ENABLED}
      JAVA_OPTS: ${DATAHUB_GMS_JAVA_OPTS}
      ENTITY_REGISTRY_CONFIG_PATH: ${DATAHUB_GMS_ENTITY_REGISTRY_CONFIG_PATH}
    ports:
      - "8080:8080"
    depends_on:
      - elasticsearch-setup
      - kafka-setup
      - datahub-gms-postgres
      - neo4j

  datahub-gms-postgres:
    container_name: datahub-gms-postgres
    hostname: datahub-gms-postgres
    image: postgres:12.3
    env_file: .env
    environment:
      POSTGRES_USER: ${DATAHUB_GMS_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DATAHUB_GMS_POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  datahub-frontend-react:
    image: linkedin/datahub-frontend-react:0a0db02
    env_file: .env
    hostname: datahub-frontend-react
    container_name: datahub-frontend-react
    environment:
      JAVA_OPTS: ${DATAHUB_FRONTEND_JAVA_OPTS}
      EBEAN_DATASOURCE_USERNAME: ${DATAHUB_GMS_EBEAN_DATASOURCE_USERNAME}
      EBEAN_DATASOURCE_PASSWORD: ${DATAHUB_GMS_EBEAN_DATASOURCE_PASSWORD}
      EBEAN_DATASOURCE_HOST: ${DATAHUB_GMS_EBEAN_DATASOURCE_HOST}
      EBEAN_DATASOURCE_URL: ${DATAHUB_GMS_EBEAN_DATASOURCE_URL}
      EBEAN_DATASOURCE_DRIVER: ${DATAHUB_GMS_EBEAN_DATASOURCE_DRIVER}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      KAFKA_SCHEMAREGISTRY_URL: ${KAFKA_SCHEMAREGISTRY_URL}
      ELASTIC_CLIENT_HOST: ${DATAHUB_GMS_ELASTICSEARCH_HOST}
      ELASTIC_CLIENT_PORT: ${DATAHUB_GMS_ELASTICSEARCH_PORT}
      NEO4J_HOST: ${NEO4J_HOST}
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      MAE_CONSUMER_ENABLED: ${DATAHUB_GMS_MAE_CONSUMER_ENABLED}
      MCE_CONSUMER_ENABLED: ${DATAHUB_GMS_MCE_CONSUMER_ENABLED}
      DATAHUB_TRACKING_TOPIC: ${DATAHUB_FRONTEND_TRACKING_TOPIC}
    ports:
      - "9002:9002"
    depends_on:
      - datahub-gms
    volumes:
      - ${HOME}/.datahub/plugins:/etc/datahub/plugins

  datahub-actions:
    image: acryldata/acryl-datahub-actions:8eb5bd0
    hostname: actions
    env_file: .env
    restart: on-failure:5
    environment:
      GMS_HOST: ${DATAHUB_GMS_HOST}
      GMS_PORT: ${DATAHUB_GMS_PORT}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMAREGISTRY_URL}
      METADATA_AUDIT_EVENT_NAME: ${DATAHUB_ACTIONS_METADATA_AUDIT_EVENT_NAME}
      METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME: ${DATAHUB_ACTIONS_METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME}
      DATAHUB_SYSTEM_CLIENT_ID: ${DATAHUB_ACTIONS_SYSTEM_CLIENT_ID}
      DATAHUB_SYSTEM_CLIENT_SECRET: ${DATAHUB_ACTIONS_SYSTEM_CLIENT_SECRET}
      KAFKA_PROPERTIES_SECURITY_PROTOCOL: ${DATAHUB_ACTIONS_KAFKA_PROPERTIES_SECURITY_PROTOCOL}
    depends_on:
      - datahub-gms

volumes:
  es_data:
  neo4j_data:
  zk_data:
  kafka_data:    
  
networks:
  ndsnet:
    driver: bridge
